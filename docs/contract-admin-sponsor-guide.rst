.. _sponsor-admin-guide:

===========================================
Race Sponsor Administrator's Guide
===========================================

.. toctree::
   :maxdepth: 4
   :caption: Contents:

The system is used to manage sponsors for the Steeplechasers signature races. The primary functions 
provided by the system include:

* maintain database of benefits for sponsor levels
* maintain record of race sponsorships
* generate sponsor agreement based on sponsor benefits
* automatically configure free entry coupons in the race registration system (RunSignUp only)
* automated initialization of possible sponsorships for the next year from the current year's sponsors

This system is designed to significantly reduce the administrative workload required
to manage sponsorships by signature race race directors.


.. _sponsor-email-conventions:

Email Conventions
======================

All emails generated by the system use races@steeplechasers.org as the from address. Emails that are
generated for the sponsor agreement are addressed TO races@steeplechasers.org. This email address is
associated with one or more individuals in the steeplechasers.org organization, and those
individuals will receive the email. When responding to this email, individuals should ALWAYS respond
from their steeplechasers.org email address and copy races@steeplechasers.org to ensure that
all communication is shared with the races team.


.. _sponsor-life-cycle:

Sponsor Life Cycle
======================

Summary:

#. Sponsor :term:`client` contacts :term:`Signature Race` Director to propose sponsorship, either through 
   direct email or a form on the FSRC website
#. :term:`Signature Race` Director enters data into contractility system and uses system 
   to generate and send sponsor agreement
#. FSRC Treasurer generates invoice
#. :term:`Sponsorship` is automatically renewed for following year and placed in **renewed-pending** state 
   until :term:`Signature Race` Director and sponsor :term:`client` resume correspondence


.. _sponsor-state-flow:

Event State Flow
=================

..
   see https://www.graphviz.org/
   see http://graphs.grevian.org/

.. graphviz::

   digraph{
      "(New Sponsor)" -> "renewed-pending" [label="RD considers new sponsor"]
      "(New Sponsor)" -> "tentative" [label="RD solicitation to new sponsor"]
      "renewed-pending" -> "tentative" [label="RD solicitation to previous sponsor"]
      "renewed-pending" -> "tentative" [label="RD solicitation to new sponsor"]
      "tentative" -> "committed" [label="Send Agreement"]
      "committed" -> "canceled" [label="Potential sponsor indicates no sponsorship"]
      "committed" -> "renewed-pending" [label="5 days after race"]
      
      "renewed-pending" [color=cyan, style=filled]
      "tentative" [color=green, style=filled]
      "committed" [color=cyan, style=filled]
      "canceled" [color=green, style=filled]

      "manual" [color=green, style=filled]
      "automatic" [color=cyan, style=filled]
   }


.. _sponsor-use-cases:

Sponsor Use Cases (What To Do...)
===================================


.. _create-new-sponsor:

When We Learn About a Potential New Sponsor
----------------------------------------------

We learn about a completely new :term:`sponsorship` that we haven't worked with
before. The inquiry could arrive through email generated by the :ref:`sponsor-query-form`
a direct email, etc., or the :term:`signature race` director could determine a
potential :term:`sponsorship` through other means. The race director should create 
a :term:`sponsorship` with whatever information is known.

From :ref:`sponsorship-overview-view` click **New**

Once the form is displayed

   * fill in as much information as you have available to you
   * click **Create**

If the sponsor :term:`client` has already agreed to a :term:`sponsorship`, fill in *Level* and 
*Amount* appropriately and set the :term:`state` to **tentative**. If the sponsor :term:`client` has 
been contacted but hasn't responded, set the :term:`state` to **tentative**, but you probably
want to set *Level* to **none** and *Amount* to 0.

If the sponsor :term:`client` has not been contacted yet, set *Level* to **none** and *Amount* to 0, 
and set the :term:`state` to **renewed-pending**.


.. _contact-sponsor:

When We Contact a Potential Sponsor
----------------------------------------------

Here the sponsor :term:`client` and :term:`sponsorship` was in the system from a previous year,
or by creating this as noted under :ref:`create-new-sponsor`. On :ref:`sponsorship-overview-view`
the admin can search for the sponsor :term:`client` in the search box. When the correct 
:term:`sponsorship` is found, click on the row, then click **Edit**.

To record that the potential sponsor :term:`client` has been contacted, do the following

    * set the *Coupon Code*
        * this field must be set at this time, but won't be configured to the registration service [#rsu]_ 
          until the sponsor agrees and **Send Agreement** is clicked
    * change the *State* to **tentative**
    * click **Update**


.. _sponsor-agrees:

When a Potential Sponsor Agrees to a Sponsorship
----------------------------------------------------

Here the sponsor :term:`client` agrees to the :term:`sponsorship`. The admin needs to
make sure the :term:`sponsorship` is in the system before this step. On :ref:`sponsorship-overview-view`
the admin can search for the sponsor :term:`client` in the search box. When the correct 
:term:`sponsorship` is found, click on the row, then click **Edit**.

To record that the potential sponsor :term:`client` has agreed to the :term:`sponsorship`, do the following

    * set the *Coupon Code* if not already set
        * this will be automatically configured to the registration service [#rsu]_ 
    * set the *Level* and *Amount* appropriately
    * click **Send Agreement**

The sponsor agreement containing appropriate :term:`sponsor benefits <sponsor benefit>` based on 
:term:`sponsor level` and coupon code will be emailed to the sponsor :term:`client` contact email,
and the state will automatically be changed to **committed**.

.. [#rsu] Currently RunSignUp is the only registration service which supports automatic configuration of coupon 
          codes. If another service is used, the coupon code must be configured in that service manually.


.. _sponsor-query-log-view:

To Review the Sponsor Query Log
----------------------------------------------------

When the sponsor :term:`client` fills out the :ref:`sponsor-query-form`, an email is sent to the
:term:`signature race` director with the information from the form. If the race director is interested
in reviewing the forms which have been filled out, these are also saved in the :ref:`sponsor-query-log`.


.. _sponsor-new-year:

To Set Up Race for New Year
----------------------------------------------------

Each year there is some maintenance required, to set up dates for the agreement, beneficiary, etc. This operation
is accessible to administrators with super-admin privilege only.

To set up the race dates, beneficiary, locations for the next year's race, go to :ref:`sponsor-race-dates-overview`
and click **New** or **Edit** as appropriate.

To set up other race variables which are rendered in the agreement, go to :ref:`sponsor-race-variables-overview`. 
In this case, the variables should be edited only, using the **Edit** button.
